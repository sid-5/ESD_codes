USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file : main.c
 * @brief : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 * opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
/* USER CODE END Includes */
/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
/* USER CODE END PTD */
/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */
/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
/* USER CODE END PM */
/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN PV */
/* USER CODE END PV */
/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */
void USART_Send_Char(char x) {
USART3->DR = x;
while(!(USART3->SR & (1 << 6))) {
}
}
void USART_Send_Str(char * x) {
int i = 0;
while(x[i] != '\0') {
USART_Send_Char(x[i]);
i += 1;
}
}
void delay(int x) {
for(int i = 0; i < x; i++) {
for(int j = 0; j < 1000; j++) {
}
}
}
/* USER CODE END PFP */
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE END 0 */
/**
 * @brief The application entry point.
 * @retval int
 */
int main(void)
{
 /* USER CODE BEGIN 1 */
RCC->AHB1ENR = (1 << 2);
RCC->APB1ENR = (1 << 18);
GPIOC->MODER = (2 << 20) | (2 << 22);
GPIOC->AFR[1] = (7 << 8) | (7 << 12);
USART3->CR1 = (1 << 13) | (1 << 3) | (1 << 2);
USART3->BRR = (7 << 0) | (24 << 4); //115200
 /* USER CODE END 1 */
 /* MCU Configuration--------------------------------------------------------*/
 /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 /* USER CODE BEGIN Init */
 /* USER CODE END Init */
 /* Configure the system clock */
 /* USER CODE BEGIN SysInit */
 /* USER CODE END SysInit */
 /* Initialize all configured peripherals */
 /* USER CODE BEGIN 2 */
 /* USER CODE END 2 */
 /* Infinite loop */
 /* USER CODE BEGIN WHILE */
 while (1)
 {
 /* USER CODE END WHILE */
 /* USER CODE BEGIN 3 */
 USART_Send_Str("SPPU\n");
 delay(500);
 }
 /* USER CODE END 3 */
}
/**
 * @brief System Clock Configuration
 * @retval None
 */
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
 /**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 *static void MX_GPIO_Init(void)
*/
/* USER CODE BEGIN 4 */
/* USER CODE END 4 */
/**
 * @brief This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 /* USER CODE BEGIN Error_Handler_Debug */
 /* User can add his own implementation to report the HAL error return state */
 __disable_irq();
while (1)
 {
 }
 /* USER CODE END Error_Handler_Debug */
}
